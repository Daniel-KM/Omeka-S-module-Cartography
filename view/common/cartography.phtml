<?php
/**
 * @var \Zend\View\Renderer\PhpRenderer $this
 * @var \Omeka\Api\Representation\AbstractResourceEntityRepresentation $resource
 * @var array $options
 */

// TODO Public annotation is not available: should manage the resource selector sidebar and rights.
$annotate = $options['annotate'];
$headers = $options['headers'];
$isPublic = $options['is_public'];

if ($headers):
    // The module is independant from the module Mapping, but some js are the same,
    // so it is recommenced to choose one module or the other to avoid js conflicts.
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet/leaflet.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet/leaflet.js', 'Cartography'));

    // Add specific code for annotation.
    if ($annotate):
    // Edition via draw.
        $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-draw/leaflet.draw.css', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-draw/leaflet.draw.js', 'Cartography'));

        // Style editor.
        $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-styleeditor/css/Leaflet.StyleEditor.min.css', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-styleeditor/javascript/Leaflet.StyleEditor.min.js', 'Cartography'));

        // Leaflet paste.
        $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-paste/css/Leaflet.paste.css', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-paste/vendor/wicket.src.js', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-paste/vendor/wicket-leaflet.src.js', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-paste/js/Leaflet.Layer.WKT.js', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-paste/js/Leaflet.paste.js', 'Cartography'));

        // TODO Load only the item selector part of the resource-form.js.
        $this->headScript()->appendFile($this->assetUrl('js/resource-form.js', 'Omeka'));

        // TODO Integrate the resource selector sidebar in public view (or inside the style editor, that will allow full screen linking too).
        echo $this->partial('common/resource-select-sidebar');
    endif;

    // Leaflet terraformer.
    // TODO See if terraformer can replace leaflet paste.
    $this->headScript()->appendFile($this->assetUrl('vendor/terraformer/terraformer.min.js', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/terraformer-arcgis-parser/terraformer-arcgis-parser.min.js', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/terraformer-wkt-parser/terraformer-wkt-parser.min.js', 'Cartography'));

    // Leaflet full screen (full view).
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-fullscreen/leaflet.fullscreen.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-fullscreen/Leaflet.fullscreen.min.js', 'Cartography'));

    // TODO Fit bounds and default view (js from module Mapping).
    // $this->headScript()->appendFile($this->assetUrl('js/control.fit-bounds.js', 'Cartography'));
    // $this->headScript()->appendFile($this->assetUrl('js/control.default-view.js', 'Cartography'));

    // For simplicity of the code, all headers are added, whatever the type.
    //  TODO Don't load the specific part of the headers if the type is not present in none of the blocks.

    // Headers for locate.

    // Geosearch.
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-providers/leaflet-providers.min.js', 'Cartography'));
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-geosearch/style.css', 'Cartography'));
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-geosearch/leaflet.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-geosearch/bundle.min.js', 'Cartography'));

    // Add wms layers if any (may be added in the config or in the resource).
    // TODO Load wms js only if there are wms layers (the list is loaded dynamically).
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-markercluster/MarkerCluster.css', 'Cartography'));
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-markercluster/MarkerCluster.Default.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-markercluster/leaflet.markercluster.js', 'Cartography'));
    $this->headLink()->appendStylesheet($this->assetUrl('vendor/leaflet-groupedlayercontrol/leaflet.groupedlayercontrol.min.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-groupedlayercontrol/leaflet.groupedlayercontrol.min.js', 'Cartography'));
    // From module Mapping.
    $this->headScript()->appendFile($this->assetUrl('js/control.opacity.js', 'Cartography'));

    if ($js = $this->setting('cartography_js_locate')):
        // Add wmts layers if needed.
        // $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-tilelayer-wmts/leaflet-tilelayer-wmts.js', 'Cartography'));
        $this->headScript()->appendFile($this->assetUrl('vendor/leaflet-tilelayer-wmts/leaflet-tilelayer-wmts-src.js', 'Cartography'));
        $this->headScript()->appendScript('$(document).ready( function() { ' . $js . ' });');
    endif;

    // Headers for describe.

    if ($js = $this->setting('cartography_js_describe')):
        $this->headScript()->appendScript('$(document).ready( function() { ' . $js . ' });');
    endif;

    // More common headers.

    $this->headLink()->appendStylesheet($this->assetUrl('css/cartography.css', 'Cartography'));
    $this->headScript()->appendFile($this->assetUrl('js/cartography.js', 'Cartography'));

    // Integration in Omeka S.
    $script = '';
    if ($isPublic):
        $script .= '
var Omeka = {};';
    endif;

    $script .= 'var basePath = ' . json_encode($this->basePath(), 320) . ';
var baseUrl = ' . json_encode($options['baseUrl'], 320) . ';
var resourceId = ' . $resource->id() . ';
var cartographySections = ' . json_encode($options['sections'], 320). ';
var rightAnnotate = ' . ($annotate ? 'true' : 'false') . ';';

    if ($annotate):
        $script .= '
var valuesJson =  ' . json_encode($resource->values(), 320). ';
var oaMotivatedBySelect = ' . json_encode($options['oaMotivatedBySelect'], 320) . ';
var oaHasPurposeSelect = ' . json_encode($options['oaHasPurposeSelect'], 320) . ';
var cartographyUncertaintySelect = ' . json_encode($options['cartographyUncertaintySelect'], 320) . ';';
    endif;

    $this->headScript()->appendScript($script);
    if ($isPublic):
        $this->jsTranslate();
    endif;
endif;

if ($isPublic):
    echo $this->partial('common/cartography-public', ['resource' => $resource, 'options' => $options]);
else:
    echo $this->partial('common/cartography-admin', ['resource' => $resource, 'options' => $options]);
endif;
